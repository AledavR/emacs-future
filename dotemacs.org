# -*- ispell-dictionary: "en_US"; -*-
#+TITLE: Emacs Config
#+STARTUP: show3levels
#+PROPERTY: header-args :tangle yes :mkdirp yes :results none

This file recreates the Emacs configuration

* ~early-init.el~
:PROPERTIES:
:header-args: :tangle early-init.el
:END:
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  (setopt package-enable-at-startup nil)

  (setopt gc-cons-threshold most-positive-fixnum)
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold (* 16 1024 1024))))

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

* Package management
:PROPERTIES:
:header-args+: :tangle lib/package-manager.el
:END:

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  (provide 'package-manager)

  (defvar elpaca-installer-version 0.11)

  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))

  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (call-process "git" nil buffer t "clone"
                                          (plist-get order :repo) repo)))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  (elpaca elpaca-use-package
    (elpaca-use-package-mode))

  (use-package org
    :defer
    :ensure `(org :repo "https://code.tecosaur.net/tec/org-mode.git/"
                  :branch "dev"))
  
  (elpaca-wait)

  (unless (equal system-type 'gnu/linux)
    (elpaca-no-symlink-mode))
#+end_src

* ~init.el~
:PROPERTIES:
:header-args+: :tangle init.el
:END:

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  (mapc (lambda(string)
          (add-to-list 'load-path (locate-user-emacs-file string)))
        '("ext" "lib"))

  (require 'package-manager)

  (require 'rca-variables)
  (require 'rca-functions)
  (require 'rca-ui)
  (require 'rca-emacs)
  (require 'rca-org)
  (require 'rca-prog)
  (require 'rca-completion)
  (require 'rca-minibuffer)
  (require 'rca-project)
  (require 'rca-keyboard)
  (require 'rca-tex)
  (require 'rca-tools)
#+end_src

* Custom variables
:PROPERTIES:
:header-args+: :tangle lib/rca-variables.el
:END:

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  (provide 'rca-variables)
#+end_src

** Directories

#+begin_src emacs-lisp
  (defcustom sync-directory (expand-file-name "~/.sync/")
    "Directory where synchonized files are stored")

  (defcustom user-cache-directory (locate-user-emacs-file "cache/")
    "Directory where temporal user files are stored")

  (defcustom backup-directory (concat user-cache-directory "saves/")
    "Directory where backup files are stored")

  (defcustom emacs-config-dirs '("" "lib/" "ext/")
    "Directories where emacs configuration files are stored")

  (defcustom dotfiles-dirs (expand-file-name "~/dotfiles/")
    "Directory where user configuration files are stored")
#+end_src

* Custom functions
:PROPERTIES:
:header-args+: :tangle lib/rca-functions.el
:END:

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  (provide 'rca-functions)
#+end_src

** List manipulation

#+begin_src emacs-lisp
  (defun rc/list-append-str (string list &optional position)
    "Appends a string to each element of a list.
  If POSITION is nil appends to the beginning of each element."
    (mapcar (lambda (element)
              (if position
                  (concat element string)
                (concat string element)))
            list))

  (defun rc/list-merge-sublists (list)
    "Merge all the sublists in a list"
    (let (value)
      (dolist (elt list value)
        (setq value (append value elt)))))

  (defun rc/list-select-random (items)
    "Selects a random element from a list"
    (let* ((size (length items))
           (index (random size)))
      (nth index items)))
#+end_src

** File manipulation

#+begin_src emacs-lisp
  (defun rc/file-get-el (dir)
    "Get all elisp files from a directory"
    (directory-files dir nil "^[^.].*el$"))

  (defun rc/file-find-config ()
    "Find config file interactively"
    (interactive)
    (find-file
     (locate-user-emacs-file
      (completing-read
       "Select config file: "
       (rc/list-merge-sublists
        (mapcar (lambda (dir) (rc/list-append-str dir (rc/file-get-el (concat user-emacs-directory dir))))
                emacs-config-dirs))))))

  (defun rc/find-stow-file ()
    (interactive)
    (find-file
     (completing-read "Select config file: "
                      (directory-files-recursively
                       dotfiles-dirs ".*" nil
                       (lambda (dir)
                         (not (string-match-p ".*git.*" dir)))))))

  (defun find-file-at-point-other-window ()
    (interactive)
    (let ((ffap-file-finder #'find-file-other-window))
      (find-file-at-point)))

  (defun load-secrets ()
    (interactive)
    (load-file (concat user-emacs-directory "secrets.el.gpg")))

  (defun rc/insert-wallpaper-file ()
    (interactive)
    (insert
     (file-name-sans-extension
      (file-name-nondirectory
       (completing-read "Select wallpaper: "
                        (directory-files-recursively
                         wallpaper-files ".*"))))))

  (defun rc/locate-or-create-directory (dir)
    "Search for a directory and create it if doesn't exists"
    (let ((dir_ (locate-user-emacs-file dir)))
      (when (not (file-directory-p dir_))
        (make-directory dir_)) dir_))

  (defun rc/config-insert-footer ()
    (let ((inhibit-message t))
      (goto-char (point-max))
      (insert "\n;; Local Variables:\n;; eval: (add-hook 'after-save-hook (lambda ()(org-babel-detangle)) nil t)\n;; End:")
      (save-buffer)))
#+end_src

** Miscellaneous

#+begin_src emacs-lisp
  (defun rc/number-between (number bot top)
    "Determines if a number is within a range"
    (if (< number top)
        (if (> number bot)
            t nil)
      nil))

  (defun rc/time-is-day ()
    "Determines if the current time is considered day"
    (if (rc/number-between
         (nth 2 (decode-time (current-time)))
         8 18)
        t nil))

  (defun rc/format-time-string-es (format &optional time)
    "Formatea la hora en español, capitalizando solo los nombres de días y meses."
    (let* ((system-time-locale "es_ES.UTF-8")
           (raw (format-time-string format time))
           ;; Lista de días y meses en español
           (dias '("lunes" "martes" "miércoles" "jueves" "viernes" "sábado" "domingo"))
           (meses '("enero" "febrero" "marzo" "abril" "mayo" "junio"
                    "julio" "agosto" "septiembre" "octubre" "noviembre" "diciembre")))
      ;; Capitalizar si palabra coincide con día o mes
      (replace-regexp-in-string
       "\\b\\w+\\b"
       (lambda (word)
         (if (member word (append dias meses))
             (capitalize word)
           word))
       raw)))

  (defun rc/truncate-lines-off ()
    "Command to set truncate-lines to t in mode hooks"
    (setq truncate-lines t))

  (defun rc/export-code-block-for-message (start end)
    "Copy current region and format it to a markdown codeblock"
    (interactive "r")
    (setq code-block (buffer-substring start end))
    (setq code-block-formatted (concat "```\n" code-block "```"))
    (deactivate-mark)
    (kill-new code-block-formatted))

  (defun line-contains? (string)
    (s-contains? string
                 (buffer-substring-no-properties
                  (line-beginning-position)
                  (line-end-position))))

  (defun replace-regexp-in-line (regexp replacement)
    (replace-regexp regexp replacement nil
                    (line-beginning-position)
                    (line-end-position)))

  (defun current-line-empty-p ()
    "Return t if the current line is empty otherwise returns nil"
    (save-excursion
      (beginning-of-line)
      (looking-at-p "[[:blank:]]*$")))

  (defun rc/wrap-in-question-marks ()
    (interactive)
    (let ((inicio (region-beginning))
          (fin (region-end)))
      (save-excursion
        (goto-char inicio)
        (insert "¿")
        (goto-char (+ fin 1))
        (when (eq (char-before) ?.) 
          (delete-char -1))
        (insert "?"))))

  (defun rc/org-update-idea ()
    "Adds a timestamp at the end of the current subtree."
    (interactive)
    (org-mark-subtree)
    (exchange-point-and-mark)
    (deactivate-mark)
    (previous-line)
    (open-line 1)
    (newline)
    (insert "UPDATE ")
    (org-insert-timestamp (current-time) t t)
    (insert ": ")
    (bookmark-set "org-last-updated-idea"))

  (defun +diary-schedule-class (start-month start-day end-month end-day year days-of-week)
    (and (diary-block start-month start-day year
                      end-month end-day year)
         (or (cl-some (lambda (p) (= p (calendar-day-of-week date)))
                      days-of-week))))
#+end_src

* Emacs module
:PROPERTIES:
:header-args+: :tangle lib/rca-emacs.el
:END:

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  (provide 'rca-emacs)

  (use-package emacs
    :ensure nil
    :bind (("C-x C-k C-x C-k" . kill-emacs)
           ("C-x B" . ibuffer)
           ("M-z" . zap-up-to-char)
           ("C-z" . nil)
           ("C-x C-r" . nil)
           ("C-x r v" . view-register)
           ("C-z C-j" . rc/file-find-config)
           ("C-z j" . rc/find-stow-file)
           ("<f5>" . recompile)
           ("C-x C-z" . nil)
           ("C-x t h" . tab-bar-mode)
           ("M-o" . other-window)
           ("C-c P" . find-file-at-point)
           ("C-x K" . (lambda () (interactive) (kill-buffer (current-buffer))))
           ("C-z K" . +save-n-kill-buffer-delete-frame)
           ("C-x C-c" . nil)
           ("C-h h" . nil)
           ("M-`" . nil)
           ("<insert>" . nil)
           ("<menu>" . nil))
    :custom
    (initial-scratch-message nil)
    (inhibit-initial-startup-message t)
    (ring-bell-function 'ignore)
    (dired-listing-switches "-alh")
    (column-number-mode t)
    (blink-cursor-mode nil)
    (which-key-mode t)
    (help-window-select t)
    (use-dialog-box nil)
    (auto-save-default nil)
    (auto-save-interval 200)
    (auto-save-timeout 20)
    (history-length 25)
    (auto-save-list-file-prefix nil)
    (backup-directory-alist `(("." . ,backup-directory)))
    (recentf-save-file (concat user-cache-directory "recentf"))
    (recentf-exclude history-excluded-filetypes)
    (tramp-persistency-file-name (concat user-cache-directory "tramp"))
    (project-list-file (concat user-cache-directory "projects"))
    (bookmark-default-file (concat user-cache-directory "bookmarks"))
    (savehist-file (concat user-cache-directory "history"))
    (savehist-additional-variables (list 'register-alist))
    (x-select-enable-clipboard t)
    ;; (read-file-name-completion-ignore-case t)
    (async-shell-command-buffer 'confirm-kill-process)
    (server-client-instructions nil)
    (register-use-preview t)
    (vc-follow-symlinks nil)
    (auth-sources `(,(concat sync-directory ".authinfo.gpg") "~/.authinfo.gpg" "~/.authinfo"))
    (custom-file (expand-file-name "custom.el" user-emacs-directory))
    :config
    (setq history-excluded-filetypes '(".*gz" ".*pdf" "bookmarks" "recentf" "init.el"
                                       ".*gitignore" "early-init.el" ".*log" ".*png"
                                       ".*jpg" ".*mp4" ".*gif" ".*tmp/lua.*"
                                       ".*agenda/.*" ".*mod/.*" ".*lib/.*" ".*ext/.*"
                                       ".*_db"))
    (defalias 'yes-or-no-p 'y-or-n-p)
    (recentf-mode 1)
    (savehist-mode 1)
    (global-auto-revert-mode 1)
    (add-hook 'prog-mode-hook 'display-line-numbers-mode)
    (add-hook 'shell-mode-hook 'rc/truncate-lines-off)
    
    (when (file-exists-p custom-file)
      (load custom-file))
    (when (not (file-exists-p user-cache-directory))
      (make-directory user-cache-directory))
    (when (not (file-exists-p backup-directory))
      (make-directory backup-directory))
    
    (defun +save-n-kill-buffer-delete-frame ()
      (interactive)
      (save-buffer)
      (kill-buffer (current-buffer))
      (delete-frame))

    ;; Greentext mode
    (setq greentext-font-lock
          '(("^>.*" . 'success)))

    (define-derived-mode greentext-mode text-mode "🍀"
      "Major mode for display faces in greentext stories. Derived from `text-mode'."
      (setq font-lock-defaults '(greentext-font-lock))
      (olivetti-mode))
    )

  (use-package calendar
    :ensure nil
    :bind (("<f6> c" . calendar))
    :mode ("diary" . diary-mode)
    :custom
    (calendar-latitude -12.0)
    (calendar-longitude -77.1)
    (calendar-mark-diary-entries-flag t)
    (calendar-mark-holidays-flag t)
    (holiday-bahai-holidays nil)
    (holiday-bahai-holidays nil)
    (holiday-hebrew-holidays nil)
    (holiday-islamic-holidays nil))

#+end_src

* User interface
:PROPERTIES:
:header-args+: :tangle lib/rca-ui.el
:END:

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  (provide 'rca-ui)
#+end_src

** User interface general options

#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :init
    (set-face-attribute 'default nil :family "Aporetic Sans Mono" :height 130)
    (set-face-attribute 'fixed-pitch nil :family "Aporetic Sans Mono")
    (set-face-attribute 'variable-pitch nil :family "Aporetic Serif Mono")
    (set-fontset-font t 'emoji (font-spec :family "Apple Color Emoji") nil 'prepend)
    (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend)
    :custom
    (frame-resize-pixelwise t)
    (modus-themes-italic-constructs t)
    (fill-column 80)
    (indent-tabs-mode nil)
    (display-line-numbers-width 3)
    (display-line-numbers-grow-only t)
    (tab-bar-format '(tab-bar-format-history
                      tab-bar-format-tabs-groups
                      tab-bar-separator
                      tab-bar-format-add-tab
                      tab-bar-format-align-right
                      tab-bar-format-global)))
#+end_src

** Buffer display options

#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :config
    (defun org-babel-detangle-no-buffer-pop-up (orig-fun &rest args)
      (save-excursion
        (let ((display-buffer-alist
               '((".*" (display-buffer-no-window) (allow-no-window . t)))))
          (apply orig-fun args))))
    (advice-add 'org-babel-detangle :around #'org-babel-detangle-no-buffer-pop-up)
    (setq display-buffer-alist
          '(((derived-mode . shell-mode)
             (display-buffer-reuse-mode-window
              display-buffer-below-selected)
             (window-height . 12)
             (dedicated . t)
             (window-parameters . ((no-other-window . t)
    			         (mode-line-format . none))))
            ("^\\*\\(Help\\|Info\\|Man\\)"
             (display-buffer-in-side-window)
             (side . right)
             (slot . 0)
             (window-width . 0.40))
            ("\\*\\(Output\\|Register Preview\\).*"
             (display-buffer-reuse-mode-window
              display-buffer-at-bottom)
             (window-height . 10)
             (window-parameters . ((mode-line-format . none))))
            ("\\*\\(Agenda Commands\\|Org Agenda\\|Org Select\\).*"
             (display-buffer-reuse-mode-window
              display-buffer-at-bottom)
             (window-parameters . ((mode-line-format . none))))
            ("\\*compilation\\*"
             (display-buffer-reuse-mode-window
              display-buffer-below-selected)
             (window-height . 12)
             (dedicated . t))
            ("\\*\\(Python\\|vterm\\)\\*"
             (display-buffer-reuse-mode-window
              display-buffer-below-selected)
             (window-height . 20)
             (dedicated . t))
            ("\\*undo-tree\\*"
             (display-buffer-in-side-window)
             (side . right)
             (dedicated . t)
             (window-width . 0.25)))))
#+end_src

** User interface variables

#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :init
    (defcustom wallpaper-files (concat sync-directory "pix/wallpaper")
      "Folder where wallpaper files are stored."
      :type 'directory))
#+end_src

** Diminish

#+begin_src emacs-lisp
  (use-package diminish
    :ensure t
    :config
    (diminish 'which-key-mode nil)
    (diminish 'eldoc-mode nil))
#+end_src
** auto-dim

#+begin_src emacs-lisp
  (use-package auto-dim-other-buffers
    :ensure t
    :init (auto-dim-other-buffers-mode))
#+end_src

** Themes

#+begin_src emacs-lisp
  (use-package ef-themes
    :ensure t
    :init
    (setq themes
          '((parsee ef-reverie ef-elea-dark)
            (yuuma ef-tritanopia-light ef-rosa)
            (nazrin2 ef-light ef-owl)
            (youmu ef-elea-light ef-elea-dark)
            (tsukasa ef-eagle ef-dream)
            (satori ef-trio-light ef-trio-dark)))
    (setq theme-character 'tsukasa)
    :config
    (setq ef-themes-mixed-fonts t)
    (setq ef-themes-headings
          '((0 . (1.6))
            (1 . (1.5))
            (2 . (1.3))
            (agenda-date . (1.3))
            (agenda-structure . (1.8))
            (t . (1.1)))))
#+end_src

** Circadian

#+begin_src emacs-lisp
  (use-package circadian
    :ensure t
    :after (:all ef-themes emacs calendar auto-dim-other-buffers)
    :hook
    (server-after-make-frame . (lambda () (enable-theme (car custom-enabled-themes))))
    :config
    (let* ((theme-colors (cdr (assoc theme-character themes)))
           (sunrise (car theme-colors))
           (sunset (cdr theme-colors)))
      (setq circadian-themes `((:sunrise . ,sunrise)
                               (:sunset . ,sunset))))
    (circadian-setup))
#+end_src

** Olivetti

#+begin_src emacs-lisp
  (use-package olivetti
    :ensure t
    :hook (Info-mode . olivetti-mode)
    :custom (olivetti-body-width 110))
#+end_src

** Spacious-Padding

#+begin_src emacs-lisp
  (use-package spacious-padding
    :ensure t
    :custom
    (spacious-padding-widths
     '( :internal-border-width 3
        :header-line-width 3
        :mode-line-width 3
        :tab-width 3
        :right-divider-width 10
        :scroll-bar-width 2
        :fringe-width 2))
    (spacious-padding-subtle-mode-line
     '( :mode-line-active spacious-padding-subtle-mode-line-active
        :mode-line-inactive spacious-padding-subtle-mode-line-inactive))
    :config
    ;; (setq-default header-line-format
    ;;               '("%e" mode-line-front-space
    ;;                 (:propertize
    ;;                  display (min-width (6.0)))
    ;;                 "%b" mode-line-end-spaces))
    
    ;; (setq spacious-padding-subtle-mode-line
    ;;       `( :mode-line-active 'default
    ;;          :mode-line-inactive vertical-border))
    (spacious-padding-mode 1))
#+end_src

** Dashboard

#+begin_src emacs-lisp
  (defun my-inhibit-startup-screen-file ()
    "Startup screen inhibitor for `command-line-functions`.
  Inhibits startup screen on the first unrecognised option which
  names an existing file."
    (ignore
     (setq inhibit-startup-screen
  	 (file-exists-p
  	  (expand-file-name argi command-line-default-directory)))))

  ;; (add-hook 'command-line-functions #'my-inhibit-startup-screen-file)
  (setq command-line-functions #'my-inhibit-startup-screen-file)

  (use-package dashboard
    :ensure t
    :preface
    (defun protect-dashboard ()
      (define-key
       dashboard-mode-map (kbd "q") 'dashboard-refresh-buffer))
    (defun rc/refresh-buffer-maybe ()
      (when (equal "*dashboard*" (buffer-name))
        (revert-buffer)))
    ;; Files don't open from command line if this is in init
    ;; TODO Check if there is any other problem in this section
    :init
    (setq banner-images
          (directory-files (locate-user-emacs-file "img") t ".*g$"))
    (setq banner-image-size (if (equal system-name "acer") 500 550))
    :hook
    (elpaca-after-init . dashboard-insert-startupify-lists)
    (elpaca-after-init . dashboard-initialize)
    (dashboard-mode . protect-dashboard)
    (dashboard-after-initialize . dashboard-refresh-buffer)
    (server-after-make-frame . rc/refresh-buffer-maybe)
    ;; (server-after-make-frame . (lambda () (set-frame-font "Aporetic Sans Mono 13")))
    :custom
    (dashboard-center-content t)
    (dashboard-startup-banner `(,(locate-user-emacs-file (concat "img/" (symbol-name theme-character) ".png"))))
    ;; (dashboard-startup-banner `(,(rc/list-select-random banner-images)))
    ;; (dashboard-startup-banner banner-images)
    (dashboard-set-navigator t)
    (dashboard-navigator-buttons `(((nil "Agenda" "Open detailed agenda buffer"
                                         (lambda (&rest _) (org-agenda nil "a")))
                                    (nil "Notes" "Open note directory"
                                         (lambda (&rest _) (dired denote-directory)))
                                    (nil "Ideas" "Open ideas notebook"
                                         (lambda (&rest _) (find-file my/org-idea-notebook))))))
    (dashboard-image-banner-max-height banner-image-size)
    (dashboard-startupify-list '(dashboard-insert-banner
                                 dashboard-insert-newline
                                 dashboard-insert-banner-title
                                 dashboard-insert-newline
                                 dashboard-insert-navigator
                                 dashboard-insert-init-info
                                 dashboard-insert-items
                                 dashboard-insert-newline
                                 dashboard-insert-footer))
    (dashboard-banner-logo-title nil)
    (dashboard-match-agenda-entry "-class")
    (dashboard-set-footer nil)
    (dashboard-footer-messages (list nil))
    (tab-bar-new-tab-choice "*dashboard*")
    (dashboard-items '((agenda . 10)))
    ;; (dashboard-agenda-tags-format 'ignore)
    :init
    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice
          (lambda () (get-buffer-create "*dashboard*"))))
    ;; :config
    ;; (add-hook server-after-make-frame-hook 'revert-buffer))
#+end_src

** Rainbow mode

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :defer t)
#+end_src

** Breadcrumb

#+begin_src emacs-lisp
  (use-package breadcrumb
    :ensure t
    :config
    
    ;; (setq-default mode-line-format
    ;;               '("%e" mode-line-front-space
    ;;                 (:propertize
    ;;                  ("" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote
    ;;                   mode-line-window-dedicated)
    ;;                  display (min-width (6.0)))
    ;;                 mode-line-frame-identification "   "
    ;;                 mode-line-position (project-mode-line project-mode-line-format)
    ;;                 (vc-mode vc-mode) "  " mode-line-modes mode-line-misc-info mode-line-end-spaces))
    
    ;; (set-face-attribute 'header-line-active nil :inherit 'mode-line-active)
    
    (breadcrumb-mode))
#+end_src

** tab-bar

#+begin_src emacs-lisp
  ;; https://www.rahuljuliato.com/posts/emacs-tab-bar-groups
  (use-package tab-bar
    :ensure nil
    :defer t
    :custom
    (tab-bar-close-button-show nil)
    (tab-bar-new-button-show nil)
    (tab-bar-tab-hints t)
    (tab-bar-auto-width nil)
    (tab-bar-separator " ")
    (tab-bar-format '(tab-bar-format-tabs-groups
  		    Tab-bar-format-tabs tab-bar-separator
  		    tab-bar-format-add-tab))
    :init
    ;;; --- OPTIONAL INTERNAL FN OVERRIDES TO DECORATE NAMES
    (defun tab-bar-tab-name-format-hints (name _tab i)
      (if tab-bar-tab-hints (concat (format "»%d«" i) "") name))

    (defun tab-bar-tab-group-format-default (tab _i &optional current-p)
      (propertize
       (concat (funcall tab-bar-tab-group-function tab))
       'face (if current-p 'tab-bar-tab-group-current 'tab-bar-tab-group-inactive)))


    ;;; --- UTILITIES FUNCTIONS
    (defun emacs-solo/tab-group-from-project ()
      "Call `tab-group` with the current project name as the group."
      (interactive)
      (when-let* ((proj (project-current))
  		(name (file-name-nondirectory
  		       (directory-file-name (project-root proj)))))
        (tab-group (format "[%s]" name))))

    (defun emacs-solo/tab-switch-to-group ()
      "Prompt for a tab group and switch to its first tab.
  Uses position instead of index field."
      (interactive)
      (let* ((tabs (funcall tab-bar-tabs-function)))
        (let* ((groups (delete-dups (mapcar (lambda (tab)
  					    (funcall tab-bar-tab-group-function tab))
  					  tabs)))
  	     (group (completing-read "Switch to group: " groups nil t)))
  	(let ((i 1) (found nil))
  	  (dolist (tab tabs)
  	    (let ((tab-group (funcall tab-bar-tab-group-function tab)))
  	      (when (and (not found)
  			 (string= tab-group group))
  		(setq found t)
  		(tab-bar-select-tab i)))
  	    (setq i (1+ i)))))))

    ;;; --- EXTRA KEYBINDINGS
    (global-set-key (kbd "C-x t P") #'emacs-solo/tab-group-from-project)
    (global-set-key (kbd "C-x t g") #'emacs-solo/tab-switch-to-group)

    ;;; --- TURNS ON BY DEFAULT
    (tab-bar-mode 1))

#+end_src

* Org-mode
:PROPERTIES:
:header-args+: :tangle lib/rca-org.el
:END:

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  (provide 'rca-org)
#+end_src

** Org general options
#+begin_src emacs-lisp
    (use-package org
      :ensure nil
      :bind (("C-z C-a" . org-agenda)
             :map org-mode-map
             ("C-c C-x 1" . rc/org-update-idea)
             ("C-M-<return>" . +org-insert-math-subtree))
      :hook ((org-capture-mode . org-align-tags)
             (org-mode . variable-pitch-mode)
             (org-mode . visual-line-mode)
             (org-agenda-mode . hl-line-mode)
             (org-babel-after-execute . org-redisplay-inline-images)
             (org-babel-after-execute . org-toggle-inline-images))
      :custom
      (org-agenda-files `(,(concat sync-directory "archive/agenda/")))
      (org-log-done 'time)
      (org-confirm-babel-evaluate nil)
      (org-agenda-skip-deadline-if-done t)
      (org-src-window-setup 'other-frame)
      (org-agenda-skip-scheduled-if-done t)
      (org-agenda-skip-scheduled-repeats-after-deadline t)
      (org-highlight-latex-and-related '(native))
      (org-image-actual-width nil)
      (org-image-align 'center)
      (org-image-max-width 250)
      (org-yank-image-save-method "./images/")
      (org-fold-catch-invisible-edits 'show-and-error)
      (org-list-demote-modify-bullet '(("+" . "-") ("-" . "+")))
      (org-agenda-time-grid '((daily today require-timed)
                              (800 1000 1200 1400 1600 1800 2000 2200)
                              "......"
                              "-----------------"))
      (modus-themes-headings '((1 . (1.5)) (2 . (1.3))
                               (agenda-date . (1.3))
                               (agenda-structure . (1.8))
                               (t . (1.1))))
      (org-safe-remote-resources
       '("\\`https://fniessen\\.github\\.io/org-html-themes/org/theme-readtheorg\\.setup\\'"))
      :config
      (setf (cdr (assoc 'file org-link-frame-setup)) 'find-file)
      (set-face-attribute 'org-latex-and-related nil :family "Aporetic Sans Mono")
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((python . t)
         (julia . t)
         (shell . t)
         (calc . t)
         (octave . t)))
      
      (add-to-list 'org-structure-template-alist '("p" . "proof"))

      ;; Org link extensions
      (defun +org-link-mpv-complete-file ()
        (let ((file (read-file-name "File: "))
          	  (pwd (file-name-as-directory (expand-file-name ".")))
          	  (pwd1 (file-name-as-directory (abbreviate-file-name
          				         (expand-file-name ".")))))
          (cond ((string-match
                  (concat "^" (regexp-quote pwd1) "\\(.+\\)") file)
                 (concat "mpv:" (match-string 1 file)))
          	    ((string-match
                  (concat "^" (regexp-quote pwd) "\\(.+\\)")
                  (expand-file-name file))
                 (concat "mpv:" (match-string 1 (expand-file-name file))))
          	    (t (concat "mpv:" file)))))

      (defun +org-link-open-in-mpv (file)
        "Opens linked file in an new mpv process"
        (start-process "open file" nil "mpv" "--title=mpv_emacs" (expand-file-name file)))
      
      (defun +org-link-remote-open-in-mpv (url)
        "Opens linked file in an new mpv process"
        (start-process "open url" nil "mpv" "--title=mpv_emacs" url))
      
      (defun +browse-steam-page (steam-id)
        (browse-url (concat "steam://advertise/" steam-id)))
      
      (org-link-set-parameters "steam" :follow 'browse-steam-page)
      (org-link-set-parameters "mpv" :complete '+org-link-mpv-complete-file :follow '+org-link-open-in-mpv)
      (org-link-set-parameters "mpv-url" :follow '+org-link-remote-open-in-mpv)

      ;; Org notes functions
      
      (defvar +org-math-bodies '("Proposición" "Teorema" "Corolario" "Nota"))
      
      (defun +org-get-top-header-title ()
        (let ((title (substring-no-properties
                      (if (= (org-outline-level) 1)
                          (org-get-heading) (org-display-outline-path)))))
          (replace-regexp-in-string " - Definición" "" title)))

      (defun +org-insert-math-subtree (type)
        (interactive (list (completing-read "Tipo: " +org-math-bodies nil t)))
        (let ((title (+org-get-top-header-title)))
          (if (= (org-outline-level) 1)
              (org-insert-subheading 4)
            (org-insert-heading))
          (insert (concat title " - " type " "))))


      (defvar +org-table-replacement-alist
        '(("v" . "\\\\downarrow")
          ("^" . "\\\\uparrow")
          (">" . "\\\\xrightarrow")
          ("<" . "\\\\xleftarrow")
          ("<>" . "\\\\xrightleftharpoons")
          ("q" . "\\\\quad"))
        "List of values replaced in org-table custom export
        commands")

      (defun +org-table-to-commutative-diagram ()
        (interactive)
        (unless (org-at-table-p) (user-error "Not at a table"))
        (mapc (lambda (x)
                (replace-regexp-in-region
                 (concat "~" (car x) "~") (cdr x) (org-table-begin) (org-table-end)))
              +org-table-replacement-alist)
        (let* ((table (org-table-to-lisp))
               (params '(:backend latex :raw t :environment "array"))
               (replacement-table
                (replace-regexp-in-string
                 "  +" " "
                 (replace-regexp-in-string
                  "{array}{\\(l+\\)}"
                  (lambda (match) (concat "{array}{" (make-string (- (length match) 9) ?c) "}")) (orgtbl-to-latex table params)))))
          (kill-region (org-table-begin) (org-table-end))
          (open-line 1)
          (push-mark)
          (insert "\\[" replacement-table "\\]")))

      (defun +org-table-from-latex-table ()
        (interactive)
        (search-backward "\[")
        (kill-whole-line)
        (set-mark (point))
        (search-forward "\]")
        (kill-whole-line)
        (backward-char)
        (activate-mark)
        (let ((beg (region-beginning))
              (end (region-end)))
          (replace-regexp-in-region "^\\|\\\\\\\\\\|&" "|" beg end)
          (goto-char beg)
          (org-table-next-field)))
      )
#+end_src

** Org-capture
#+begin_src emacs-lisp
  (use-package org-capture
    :ensure nil
    :after org
    :bind (("C-z C-c" . org-capture)
           ("C-z C-l" . org-store-link))
    :init
    (defvar my/org-academic-agenda  (concat (car org-agenda-files) "academic.org"))
    (defvar my/org-personal-agenda (concat (car org-agenda-files) "personal.org"))
    (defvar my/org-idea-notebook (concat sync-directory "archive/notebooks/ideas.org"))
    (defvar my/org-dream-diary (concat sync-directory "archive/notebooks/dreams.org"))
    
    (defvar my/org-created-property
      "\n:PROPERTIES:\n:CREATED: [%<%Y-%m-%d %a %H:%M>]\n:END:")

    (defvar my/org-file-link
      "\n\nArchivo: [[%L][%f]]")
    
    (defun rc/refile-to (file headline)
      "Move current headline to specified location"
      (let ((pos (save-excursion
  		 (find-file file)
  		 (org-find-exact-headline-in-buffer headline))))
        (org-refile nil nil (list headline file nil pos)))
      (org-save-all-org-buffers)
      (switch-to-buffer (current-buffer)))
    
    (defun rc/idea-to-task (class)
      "Promotes an idea to a pending task"
      (interactive
       (list (completing-read "Tipo de tarea:" '("Universidad" "Personal"))))
      (org-todo "TODO")
      (rc/refile-to my/org-personal-agenda class))
    
    :custom
    (org-capture-templates `(
                             ("a" "academic task")
                             ("ae" "exam" entry (file+headline my/org-academic-agenda "Exam") ,(concat "* TODO %^{Exam} %^g\nSCHEDULED: %^T" my/org-created-property) :empty-lines 1)
                             ("ap" "project" entry (file+headline my/org-academic-agenda "Project") ,(concat "* TODO %^{Project} %^g\nDEADLINE:%^T" my/org-created-property) :empty-lines 1)
                             ("ah" "homework" entry (file+headline my/org-academic-agenda "Homework") ,(concat "* TODO %^{Homework} %^g\nDEADLINE:%^T" my/org-created-property) :empty-lines 1)
                             ("p" "personal task")
                             ("pc" "constructive" entry (file+headline my/org-personal-agenda "Constructive") ,(concat "* TODO %^{Task}\nDEADLINE: %^T" my/org-created-property) :empty-lines 1)
                             ("pm" "mundane" entry (file+headline my/org-personal-agenda "Mundane") ,(concat "* TODO %^{Task}\nDEADLINE: %^T" my/org-created-property) :empty-lines 1)
                             ("n" "note")
                             ("ni" "idea" entry (file my/org-idea-notebook) ,(concat "* %^{Idea}" my/org-created-property "\n%?") :empty-lines 1)
                             ("nd" "dream" entry (file my/org-dream-diary) ,(concat"* %^{Dream}" my/org-created-property "\n%?") :empty-lines 1)
                             ("i" "ideas management")
                             ("ic" "make constructive task from idea" entry (file+headline my/org-personal-agenda "Constructive") ,(concat "* TODO %a \nDEADLINE %^T" my/org-created-property "\n%?") :empty-lines 1)
                             ("im" "make mundane task from idea" entry (file+headline my/org-personal-agenda "Mundane") ,(concat "* TODO %a \nDEADLINE %^T" my/org-created-property "\n%?") :empty-lines 1)
                             ))
    )

#+end_src
  
** Org export options
#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :config
    ;; Code extracted from
    ;; https://pragmaticemacs.wordpress.com/2017/03/13/export-org-mode-headlines-to-separate-files/
    (defun org-export-headlines-to-pdf ()
      "Export all subtrees that are *not* tagged with :noexport: to
  separate files.

  Subtrees that do not have the :EXPORT_FILE_NAME: property set
  are exported to a filename derived from the headline text."
      (interactive)
      (save-buffer)
      (let ((modifiedp (buffer-modified-p)))
        (save-excursion
          (goto-char (point-min))
          (goto-char (re-search-forward "^*"))
          (set-mark (line-beginning-position))
          (goto-char (point-max))
          (org-map-entries
           (lambda ()
             (let ((export-file (org-entry-get (point) "EXPORT_FILE_NAME")))
               (unless export-file
                 (org-set-property
                  "EXPORT_FILE_NAME"
                  (replace-regexp-in-string " " "_" (nth 4 (org-heading-components)))))
               (deactivate-mark)
               (org-latex-export-to-pdf nil t)
               (unless export-file (org-delete-property "EXPORT_FILE_NAME"))
               (set-buffer-modified-p modifiedp)))
           "-noexport" 'region-start-level)))))
#+end_src

** Org export packages
#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t)

  (use-package ox-pandoc
    :ensure t
    :custom
    (org-pandoc-options
     '((lua-filter . "pagebreak.lua")
       (standalone . t)
       (highlight-style . "tango"))))
#+end_src

** Org latex options
#+begin_src emacs-lisp :tangle no
  (use-package org
    :ensure nil
    :custom
    (org-highlight-latex-and-related '(latex script entities))
    (org-latex-compiler "lualatex")
    (org-pretty-entities-include-sub-superscripts nil)
    (org-latex-listings 'minted)
    (org-latex-packages-alist '(("" "minted")))
    (org-latex-pdf-process
     '("lualatex -shell-escape -interaction nonstopmode %f"
       "lualatex -shell-escape -interaction nonstopmode %f"))
    :config
    (setq luamagick '(luamagick
                      :programs ("lualatex" "magick")
                      :description "pdf > png"
                      :message "you need to install lualatex and imagemagick."
                      :use-xcolor t
                      :image-input-type "pdf"
                      :image-output-type "png"
                      :image-size-adjust (1.0 . 1.0)
                      :latex-compiler ("lualatex -interaction nonstopmode -output-directory %o %f")
                      :image-converter ("magick convert -density %D -trim -antialias %f -quality 100 %O")))
    (add-to-list 'org-preview-latex-process-alist luamagick)
    (setq org-preview-latex-default-process 'luamagick)
    (setq org-preview-latex-default-process 'imagemagick)
    )
#+end_src

** Org latex preview
#+begin_src emacs-lisp
  (use-package org-latex-preview
    :config
    ;; Increase preview width
    (plist-put org-latex-preview-appearance-options
               :page-width 0.8)

    ;; Use dvisvgm to generate previews
    ;; You don't need this, it's the default:
    (setq org-latex-preview-process-default 'dvisvgm)

    ;;(setq-default  org-latex-preview-preamble
    ;;               "\\documentclass{minimal}\12[DEFAULT-PACKAGES]\12[PACKAGES]\12\\usepackage{amsmath}\12\\usepackage{amssymb}\12\\usepackage{xcolor}\12\\DeclareMathOperator{\\Dom}{Dom}\12\\DeclareMathOperator{\\Ran}{Ran}")
    (setq-default  org-latex-preview-preamble
                   "\\documentclass{minimal}
  [DEFAULT-PACKAGES]
  [PACKAGES]
  \\usepackage{amsmath}
  \\usepackage{amssymb}
  \\usepackage{mathtools}
  \\usepackage{xcolor}")
    
    ;; Turn on auto-mode, it's built into Org and much faster/more featured than
    ;; org-fragtog. (Remember to turn off/uninstall org-fragtog.)
    (add-hook 'org-mode-hook 'org-latex-preview-auto-mode)

    ;; Block C-n, C-p etc from opening up previews when using auto-mode
    (setq org-latex-preview-auto-ignored-commands
          '(next-line previous-line mwheel-scroll
                      scroll-up-command scroll-down-command))

    ;; Enable consistent equation numbering
    (setq org-latex-preview-cache 'temp)

    ;; Bonus: Turn on live previews.  This shows you a live preview of a LaTeX
    ;; fragment and updates the preview in real-time as you edit it.
    ;; To preview only environments, set it to '(block edit-special) instead
    (setq org-latex-preview-live t)
    
    (setq org-latex-preview-live t)

    ;; More immediate live-previews -- the default delay is 1 second
    (setq org-latex-preview-live-debounce 0.25)
    (defun my/org-latex-preview-uncenter (ov)
      (overlay-put ov 'before-string nil))
    (defun my/org-latex-preview-recenter (ov)
      (overlay-put ov 'before-string (overlay-get ov 'justify)))
    (defun my/org-latex-preview-center (ov)
      (save-excursion
        (goto-char (overlay-start ov))
        (when-let* ((elem (org-element-context))
                    ((or (eq (org-element-type elem) 'latex-environment)
                         (string-match-p "^\\\\\\[" (org-element-property :value elem))))
                    (img (overlay-get ov 'display))
                    (prop `(space :align-to (- center (0.55 . ,img))))
                    (justify (propertize " " 'display prop 'face 'default)))
          (overlay-put ov 'justify justify)
          (overlay-put ov 'before-string (overlay-get ov 'justify)))))
    (define-minor-mode org-latex-preview-center-mode
      "Center equations previewed with `org-latex-preview'."
      :global nil
      (if org-latex-preview-center-mode
          (progn
            (add-hook 'org-latex-preview-overlay-open-functions
                      #'my/org-latex-preview-uncenter nil :local)
            (add-hook 'org-latex-preview-overlay-close-functions
                      #'my/org-latex-preview-recenter nil :local)
            (add-hook 'org-latex-preview-overlay-update-functions
                      #'my/org-latex-preview-center nil :local))
        (remove-hook 'org-latex-preview-overlay-close-functions
                     #'my/org-latex-preview-recenter)
        (remove-hook 'org-latex-preview-overlay-update-functions
                     #'my/org-latex-preview-center)
        (remove-hook 'org-latex-preview-overlay-open-functions
                     #'my/org-latex-preview-uncenter))))
#+end_src

* Programming environment
:PROPERTIES:
:header-args+: :tangle lib/rca-prog.el
:END:

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  (provide 'rca-prog)
#+end_src

** ~vterm~

#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :defer t
    :bind (("C-x t V" . vterm)
           ("C-x t v" . vterm-other-tab))
    :custom
    (vterm-shell "/usr/bin/fish")
    :preface
    (defun vterm-other-tab ()
      (interactive)
      (let* ((dir (file-name-nondirectory (directory-file-name default-directory)))
             (buffer (concat "*" dir "-shell*")))
        (if (get-buffer buffer)
            (if (tab-bar-get-buffer-tab buffer)
                (tab-switch buffer)
              (switch-to-buffer-other-tab buffer))
          (other-tab-prefix)
          (vterm buffer)))))
#+end_src

** GNU plot

#+begin_src emacs-lisp
  (use-package gnuplot
    :ensure t
    :defer t)
#+end_src

** LUA

#+begin_src emacs-lisp
  (use-package lua-mode
    :ensure t
    :defer t)

  ;; (use-package lua-ts-mode
  ;;   :ensure nil
  ;;   :mode "\\.lua\\'"
  ;;   :bind-keymap (("C-c C-c" . lua-send-buffer)))
#+end_src

** Julia

#+begin_src emacs-lisp
  (use-package julia-mode
    :ensure t
    :bind  (:map
            julia-mode-map
            ("`" . julia-insert-unicode-symbol))
    :init  
    (defvar julia-unicode-symbols-alist
      '((?a . "α") (?b . "β") (?\C-a . "ₐ")
        (?0 . "₀") (?1 . "₁") (?2 . "₂") (?3 . "₃") (?4 . "₄"))
      "List of unicode symbols to be inserted in julia-mode")

    (defun julia-insert-unicode-symbol ()
      (interactive)
      (let* ((char (read-char "Insert symbol: "))
             (entry (assoc char julia-unicode-symbols-alist))
             (symbol (cdr entry)))
        (if (equal nil entry)
            (error "The symbol is not mapped")
          (insert symbol)))))

  (use-package julia-snail
    :ensure t
    :defer t
    :hook (julia-mode . julia-snail-mode))
#+end_src

** Python

#+begin_src emacs-lisp
  (use-package python-mode
    :ensure nil
    :defer t
    :bind-keymap (("C-c v" . python-set-venv))
    :init
    (defun python-set-venv (interpreter)
      (interactive "fPython interpreter:")
      (setq python-interpreter interpreter
            python-shell-interpreter interpreter))
    :config
    (setq-default python-eldoc-get-doc nil))
#+end_src

** Markdown

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :defer t)
#+end_src

** Java

#+begin_src emacs-lisp :tangle no
  (use-package eglot-java
    :ensure t
    :defer t
    :custom (eglot-java-eclipse-jdt-args `("-Xmx1G" "--add-modules=ALL-SYSTEM" "--add-opens"
                                           "java.base/java.util=ALL-UNNAMED" "--add-opens"
                                           "java.base/java.lang=ALL-UNNAMED"
                                           ,(concat "-javaagent:" (expand-file-name user-emacs-directory) "share/eclipse.jdt.ls/plugins/lombok.jar")
                                           ,(concat "-Xbootclasspath/a:" (expand-file-name user-emacs-directory) "share/eclips.jdtls/plugins/lombok.jar"))))

  (use-package java
    :ensure nil
    :defer t
    :config
    (defun rc/spring-run ()
      "Runs current spring boot project in an async shell window"
      (interactive)
      (let ((default-directory (project-root (project-current t))))
        (async-shell-command "mvn spring-boot:run" "\*Spring Boot\*")))

    (defun rc/spring-shell ()
      "Opens the current spring shell"
      (interactive)
      (if (get-buffer "\*Spring Boot\*")
          (display-buffer "\*Spring Boot\*")
        (message "No spring boot proccess running. Try spring-run."))))
#+end_src

** HTML

#+begin_src emacs-lisp
  (use-package mhtml-mode
    :ensure nil
    :defer t
    :preface
    (defun sgml-delete-tagged-text ()
      "Delete text between the tags that contain the current point"
      (interactive)
      (let ((b (point)))
        (sgml-skip-tag-backward 1)
        (when (not (eq b (point)))
          ;; moved somewhere, should be at front of a tag now
          (save-excursion 
            (forward-sexp 1)
            (setq b (point)))
          (sgml-skip-tag-forward 1)
          (backward-sexp 1)
          (delete-region b (point))
          (meow-insert))))
    :bind (:map mhtml-mode-map
                ("M-o" . nil)
                ("C-c f" . facemenu-keymap)
                ("C-c d" . sgml-delete-tagged-text)))
#+end_src

** Tree-sitter

#+begin_src emacs-lisp
  (use-package treesit
    :ensure nil
    :custom
    (treesit-language-source-alist
     '((bash "https://github.com/tree-sitter/tree-sitter-bash")
       (c "https://github.com/tree-sitter/tree-sitter-c")
       (cmake "https://github.com/uyha/tree-sitter-cmake")
       (common-lisp "https://github.com/theHamsta/tree-sitter-commonlisp")
       (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
       (css "https://github.com/tree-sitter/tree-sitter-css")
       (csharp "https://github.com/tree-sitter/tree-sitter-c-sharp")
       (elisp "https://github.com/Wilfred/tree-sitter-elisp")
       (go "https://github.com/tree-sitter/tree-sitter-go")
       (go-mod "https://github.com/camdencheek/tree-sitter-go-mod")
       (html "https://github.com/tree-sitter/tree-sitter-html")
       (js . ("https://github.com/tree-sitter/tree-sitter-javascript" "master" "src"))
       (json "https://github.com/tree-sitter/tree-sitter-json")
       (lua "https://github.com/Azganoth/tree-sitter-lua")
       (make "https://github.com/alemuller/tree-sitter-make")
       (markdown "https://github.com/ikatyang/tree-sitter-markdown")
       (python "https://github.com/tree-sitter/tree-sitter-python")
       (r "https://github.com/r-lib/tree-sitter-r")
       (rust "https://github.com/tree-sitter/tree-sitter-rust")
       (toml "https://github.com/tree-sitter/tree-sitter-toml")
       (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
       (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))
       (yaml "https://github.com/ikatyang/tree-sitter-yaml"))))

  (use-package toml-ts-mode
    :ensure nil
    :mode "\\.toml\\'")

  (use-package yaml-ts-mode
    :ensure nil
    :mode "\\.yml\\'")
#+end_src

** ~eglot~
#+begin_src emacs-lisp
  (use-package eglot
    :ensure nil
    :defer t
    :custom
    (eldoc-echo-area-use-multiline-p nil)
    (eglot-ignored-server-capabilities '(:inlayHintProvider))
    (eglot-events-buffer-config '(:size 0))
    :config
    (fset #'jsonrpc--log-event #'ignore)
    (defun eglot-open-link ()
      "Open markdown link at point in the `eldoc-doc-buffer'."
      (interactive)
      (let ((url (get-text-property (point) 'help-echo)))
        (if url
            (browse-url-xdg-open url)
          (message "No URL found at point")))))
#+end_src

** ~flycheck~
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t
    :hook (LaTeX-mode . flycheck-mode))
#+end_src

** Typst

#+begin_src emacs-lisp
  (use-package typst-ts-mode
    :ensure t
    :custom
    (typst-ts-preview-function 'find-file-other-window)
    ;; (typst-ts-watch-options (list "--open"))
    :config
    (setq-default eglot-workspace-configuration
                   '(:projectResolution "lockDatabase" :typstExtraArgs ["main.typ"]))
    (add-to-list 'treesit-language-source-alist
                 '(typst "https://github.com/uben0/tree-sitter-typst")))

  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs '(typst-ts-mode "tinymist")))

  (use-package websocket
    :ensure t)

  (use-package typst-preview
    :ensure (:host github :repo "havarddj/typst-preview.el")
    :config
    (setq typst-preview-browser "chromium")
    (define-key typst-preview-mode-map (kbd "C-c C-j") 'typst-preview-send-position))
#+end_src

* Completion
:PROPERTIES:
:header-args+: :tangle lib/rca-completion.el
:END:

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  (provide 'rca-completion)
#+end_src

** Completion general options

#+begin_src emacs-lisp
  (use-package emacs
    :custom
    (tab-always-indent 'complete)
    (text-mode-ispell-word-completion nil))
#+end_src

** ~yasnippet~

#+begin_src emacs-lisp :tangle no
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :custom
    (yas-snippet-dirs `(,(locate-user-emacs-file "snippets")))
    :config
    (when (not (file-exists-p  snippets-directory))
      (make-directory snippets-directory))
    (yas-global-mode 1))
#+end_src

** ~tempel~

#+begin_src emacs-lisp
  ;; Configure Tempel
  (use-package tempel
    :ensure t
    ;; Require trigger prefix before template name when completing.
    ;; :custom
    ;; (tempel-trigger-prefix "<")

    :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
           ("M-*" . tempel-insert))

    :init

    ;; Setup completion at point
    (defun tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'.
      ;; `tempel-expand' only triggers on exact matches. Alternatively use
      ;; `tempel-complete' if you want to see all matches, but then you
      ;; should also configure `tempel-trigger-prefix', such that Tempel
      ;; does not trigger too often when you don't expect it. NOTE: We add
      ;; `tempel-expand' *before* the main programming mode Capf, such
      ;; that it will be tried first.
      (setq-local completion-at-point-functions
                  (cons #'tempel-expand
                        completion-at-point-functions)))

    (add-hook 'conf-mode-hook 'tempel-setup-capf)
    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf)
    (add-hook 'eglot-managed-mode-hook 'tempel-setup-capf)
    ;; Optionally make the Tempel templates available to Abbrev,
    ;; either locally or globally. `expand-abbrev' is bound to C-x '.
    ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
    ;; (global-tempel-abbrev-mode)
    )

  ;; Optional: Add tempel-collection.
  ;; The package is young and doesn't have comprehensive coverage.
  (use-package tempel-collection
    :ensure t)

  ;; Optional: Add tempel-eglot bridge
  (use-package eglot-tempel
    :ensure t
    :defer t
    ;; :preface (eglot-tempel-mode)
    :init
    (eglot-tempel-mode t))
#+end_src

** ~corfu~

#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :bind
    (("C-<tab>" . completion-at-point)
     :map corfu-map
     ("S-SPC" . corfu-insert-separator)
     :map corfu-popupinfo-map
     ("M-n" . corfu-popupinfo-scroll-up)
     ("M-p" . corfu-popupinfo-scroll-down))
    :init
    (global-corfu-mode)
    :custom
    (corfu-min-width 70)
    (corfu-max-width 70)
    (corfu-popupinfo-mode 1)
    (corfu-popupinfo-delay '(1.0 . 1.2))
    (corfu-on-exact-match nil)
    ;; (corfu-auto-prefix 4)
    (corfu-separator ?\s)
    (corfu-auto t)
    (corfu-cycle t)
    (corfu-quit-no-match 'separator))
#+end_src

** Icons

#+begin_src emacs-lisp
  (use-package kind-icon
    :ensure t
    :after corfu
    :custom
    (kind-icon-use-icons nil)
    ;; (kind-icon-blend-background t)
    ;; (kind-icon-default-face 'corfu-default) ; only needed with blend-background
    :config
    (add-hook 'after-enable-theme-hook  #'kind-icon-reset-cache)
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** ~cape~

#+begin_src emacs-lisp
  (use-package cape
    :ensure t
    :init
    ;; Make dabbrev use the correct case
    (defun my-cape--dabbrev-fix-expansion (expansion)
      "Return the downcased EXPANSION.
   Removes trailing non-alphanumeric characters if present."
      (let ((downcased (downcase expansion)))
        (substring downcased 0 (string-match-p "[^[:alnum:]]+$" downcased))))
    
    (defun my-cape--dabbrev-list (input)
      "Find all dabbrev expansions for INPUT. "
      (cape--silent
        ;; Don't search all buffers. Only those with the same major-mode.
        (let ((dabbrev-check-other-buffers t)
              (dabbrev-check-all-buffers nil))
          (dabbrev--reset-global-variables))
        (cons
         (apply-partially #'string-prefix-p input)
         (cl-loop for w in (mapcar #'my-cape--dabbrev-fix-expansion
                                   (dabbrev--find-all-expansions input t))
                  if (>= (length w) cape-dabbrev-min-length) collect
                  (cape--case-replace t input w)))))

    (advice-add 'cape--dabbrev-list :override #'my-cape--dabbrev-list)

    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block))
#+end_src

** ~dabbrev~

#+begin_src emacs-lisp
  (use-package dabbrev
    :bind (("C-." . dabbrev-expand)
           ("C-:" . dabbrev-completion))
    :config
    (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
    ;; Since 29.1, use `dabbrev-ignored-buffer-regexps' on older.
    (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'tags-table-mode))
#+end_src

** ~smartparens~

#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :hook (prog-mode org-mode)
    :config
    (require 'smartparens-config))
#+end_src

** ~flyspell~

#+begin_src emacs-lisp :tangle no
  (use-package flyspell
    :bind (:map flyspell-mode-map
                ("C-." . nil))
    :config
    (setq ispell-program-name "aspell"
  	ispell-personal-dictionary  (concat sync-directory "dict/aspell_es")
  	ispell-dictionary "es")
    :hook (org-mode . flyspell-mode))
#+end_src

** ~jinx~

#+begin_src emacs-lisp
  (use-package jinx
    :ensure t
    :hook (org-mode . jinx-mode)
    :bind (("M-$" . jinx-correct)
           ("C-M-$" . jinx-languages))
    :custom (jinx-languages "es estec en_US"))
#+end_src

** ~vundo~

#+begin_src emacs-lisp
  (use-package vundo
    :ensure t
    :bind ("C-x u" . vundo))
#+end_src

** ~eldoc~

#+begin_src emacs-lisp
  (use-package eldoc-box
    :ensure t
    :custom
    (eldoc-box-max-pixel-width 550)
    (eldoc-box-max-pixel-height 400)
    :bind (("M-ñ" . eldoc-box-help-at-point)
           ("M-n" . eldoc-box-scroll-up)
           ("M-p" . eldoc-box-scroll-down)))
#+end_src

** ~lite~

#+begin_src emacs-lisp
  (use-package lite
    :ensure (:host github :repo "amno1/lite")
    :custom (lite-template-dirs (list  (concat sync-directory "templates/files/")))
    :config
    (defun lite-insert-template-in-current-file (template-file-name)
      "Insert contents of TEMPLATE-FILE-NAME into `current-buffer'"
      (interactive
       (list (completing-read
              "Template file: " (directory-files-recursively
                                 (if (length> lite-template-dirs 1)
                                     (completing-read "Select directory: " lite-template-dirs)
                                   (car lite-template-dirs))
                                 ".*"))))
      (lite-generate-from-template (file-name-nondirectory template-file-name) (buffer-file-name))
      (revert-buffer t t))

    (defun lite-insert-template-at-point (template-file-name)
      "Insert contents of TEMPLATE-FILE-NAME at point"
      (interactive
       (list (completing-read
              "Template file: " (directory-files-recursively
                                 (if (length> lite-template-dirs 1)
                                     (completing-read "Select directory: " lite-template-dirs)
                                   (car lite-template-dirs))
                                 ".*"))))
      (lite-insert-template (file-name-nondirectory template-file-name))))
#+end_src

* Minibuffer
:PROPERTIES:
:header-args+: :tangle lib/rca-minibuffer.el
:END:

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  (provide 'rca-minibuffer)
#+end_src

** ~vertico~

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)
    :custom
    (vertico-cicle t)
    (vertico-count 12))
#+end_src

** ~orderless~

#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles
                                            basic
                                            partial-completion)))))
#+end_src

** ~marginalia~

#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode))
#+end_src

** ~consult~

#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :bind (("C-x C-b" . consult-buffer)
           ("C-x R" . consult-recent-file)
           ("C-x r i" . consult-register)
           ("C-x r b" . consult-bookmark)
           ("M-s f" . consult-recent-file)
           ("M-s b" . consult-bookmark)
           ("M-s l" . consult-line)
           ("M-s i" . consult-idea)
           ("M-s r" . consult-ripgrep)
           :map org-mode-map
           ("M-s s" . consult-org-heading))
    :custom
    (consult-ripgrep-args (concat "rg --null --line-buffered --color=never "
                                  "--max-columns=1000 --path-separator / "
                                  "--smart-case --no-heading --with-filename "
                                  "--line-number --search-zip  -. -g !.git "))
    :config
    (defun consult-idea (&optional match scope)
      (interactive)
      (unless my/org-idea-notebook
        (user-error "No ideas file"))
      (consult-org-heading match (list my/org-idea-notebook)))

    (consult-customize consult-idea :preview-key nil)
    (consult-customize consult-recent-file :preview-key nil)
    (consult-customize consult-bookmark :preview-key nil))
#+end_src

* Project management
:PROPERTIES:
:header-args+: :tangle lib/rca-project.el
:END:

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  (provide 'rca-project)
#+end_src

** ~transient~

#+begin_src emacs-lisp
  (use-package transient
    :ensure t
    :defer t
    :custom
    (transient-history-file (concat user-cache-directory "transient/history.el"))
    (transient-levels-file (concat user-cache-directory "transient/levels.el"))
    (transient-values-file (concat user-cache-directory "transient/values.el")))
#+end_src

** ~llama~

#+begin_src emacs-lisp
  (use-package llama
    :ensure t
    :defer t)
#+end_src

** ~magit~

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :requires transient llama)
    ;; :defer t)
#+end_src

** ~skeletor~

#+begin_src emacs-lisp
  (use-package skeletor
    :ensure t
    :defer t
    :custom
    (skeletor-user-directory (concat sync-directory "templates/skeletons/"))
    (skeletor-project-directory "~/Files/Documents/workspace/")
    (skeletor-completing-read-function 'completing-read)
    :config
    (skeletor-define-template "latex-article"
      :title "Latex Article"
      :no-license? t :no-git? t)
    (skeletor-define-template "latex-apa7"
      :title "Latex APA 7th Article"
      :no-license? t :no-git? t)
    (skeletor-define-template "latex-beamer"
      :title "Latex Beamer"
      :no-license? t :no-git? t))
#+end_src

* Input
:PROPERTIES:
:header-args+: :tangle lib/rca-keyboard.el
:END:

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  (provide 'rca-keyboard)
#+end_src

** ~meow~

#+begin_src emacs-lisp 
  (use-package meow
    :ensure t
    :config
    (defun meow-setup ()
      (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
      (meow-motion-overwrite-define-key
       '("j" . meow-next)
       '("k" . meow-prev)
       '("<escape>" . ignore))

      (meow-leader-define-key
       ;; SPC j/k will run the original command in MOTION state.
       ;; '("j" . "H-j") ; Not needed anymore
       ;; '("k" . "H-k")
       '("d" . "C-x 0")
       '("t" . "C-x t")
       '("q" . "C-x C-k")
       '("r" . "C-x r")
       '("@" . "C-c @")
       '("u" . meow-universal-argument)
       ;; Use SPC (0-9) for digit arguments.
       '("1" . meow-digit-argument)
       '("2" . meow-digit-argument)
       '("3" . meow-digit-argument)
       '("4" . meow-digit-argument)
       '("5" . meow-digit-argument)
       '("6" . meow-digit-argument)
       '("7" . meow-digit-argument)
       '("8" . meow-digit-argument)
       '("9" . meow-digit-argument)
       '("0" . meow-digit-argument)
       '("/" . meow-keypad-describe-key)
       '("?" . meow-cheatsheet))

      (meow-normal-define-key
       '("0" . meow-expand-0)
       '("9" . meow-expand-9)
       '("8" . meow-expand-8)
       '("7" . meow-expand-7)
       '("6" . meow-expand-6)
       '("5" . meow-expand-5)
       '("4" . meow-expand-4)
       '("3" . meow-expand-3)
       '("2" . meow-expand-2)
       '("1" . meow-expand-1)
       '("-" . negative-argument)
       '(";" . meow-reverse)
       '("," . meow-inner-of-thing)
       '("." . meow-bounds-of-thing)
       '("[" . meow-beginning-of-thing)
       '("]" . meow-end-of-thing)
       '("a" . meow-append)
       '("A" . meow-open-below)
       '("b" . meow-back-word)
       '("B" . meow-back-symbol)
       '("c" . meow-change)
       '("d" . meow-delete)
       '("D" . meow-backward-delete)
       '("e" . meow-next-word)
       '("E" . meow-next-symbol)
       '("f" . meow-find)
       '("g" . meow-cancel-selection)
       '("G" . meow-grab)
       '("h" . meow-left)
       '("H" . meow-left-expand)
       '("i" . meow-insert)
       '("I" . meow-open-above)
       '("j" . meow-next)
       '("J" . meow-next-expand)
       '("k" . meow-prev)
       '("K" . meow-prev-expand)
       '("l" . meow-right)
       '("L" . meow-right-expand)
       '("m" . meow-join)
       '("n" . meow-search)
       '("o" . meow-block)
       '("O" . meow-to-block)
       '("p" . meow-yank)
       '("P" . meow-paren-mode)
       ;; '("q" . meow-quit)
       '("Q" . meow-indent)
       '("r" . meow-replace)
       '("R" . meow-swap-grab)
       '("s" . meow-kill)
       '("t" . meow-till)
       '("u" . meow-undo)
       '("U" . meow-undo-in-selection)
       '("v" . meow-visit)
       '("w" . meow-mark-word)
       '("W" . meow-mark-symbol)
       '("x" . meow-line)
       '("X" . meow-goto-line)
       '("°" . meow-last-buffer)
       '("y" . meow-save)
       '("Y" . meow-sync-grab)
       '("z" . meow-pop-selection)
       '("¿" . repeat)
       '("<escape>" . ignore))

    (meow-motion-overwrite-define-key
     '("°" . meow-last-buffer)
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))

    (with-eval-after-load 'consult
      (meow-normal-define-key
       '("X" . consult-goto-line)))


    (add-to-list 'meow-keypad-start-keys '(?z . ?z))
    ;; (add-to-list 'meow-keypad-start-keys '(?, . ?,)) ;; TODO Maybe use this for mode hotkeys

    (meow-thing-register 'angles
                         '(pair ("<") (">"))
                         '(pair ("<") (">")))
    ;; (meow-thing-register 'latex
    ;;                      latex-thing-regexp
    ;;                      latex-thing-regexp)
    (meow-thing-register 'inline-math
                         '(pair ("\\(") ("\\)"))
                         '(pair ("\\(") ("\\)")))
    (meow-thing-register 'display-math
                         '(pair ("\\[") ("\\]"))
                         '(pair ("\\[") ("\\]")))
    (meow-thing-register 'double-quotes
                         '(regexp "\"" "\"")
                         '(regexp "\"" "\""))
    (meow-thing-register 'single-quotes
                         '(regexp "\'" "\'")
                         '(regexp "\'" "\'"))
    ;; (meow-thing-register 'html-tag
    ;; 		       '(regexp "<.*>" "</?.*>")
    ;; 		       '(regexp "<.*>" "</?.*>"))
    ;; (add-to-list 'meow-char-thing-table '(?t . html-tag))
    (add-to-list 'meow-char-thing-table '(?a . angles))
    (add-to-list 'meow-char-thing-table '(?\" . double-quotes))
    ;; (add-to-list 'meow-char-thing-table '(?x . latex))
    (add-to-list 'meow-char-thing-table '(?\' . single-quotes))
    (add-to-list 'meow-char-thing-table '(?m . inline-math))
    (add-to-list 'meow-char-thing-table '(?M . display-math))

    (setq meow-paren-keymap (make-keymap))

    (meow-define-state paren
      "paren state"
      :lighter " [P]"
      :keymap meow-paren-keymap)
    (setq meow-cursor-type-paren 'hollow)

    (defun wrap-string () (interactive) (sp-wrap-with-pair "\""))
    (defun back-transpose () (interactive) (sp-transpose-sexp -1))

    (meow-define-keys 'paren
      '("<escape>" . meow-normal-mode)
      '("e" . sp-forward-sexp)
      '("b" . sp-backward-sexp)
      ;; '("j" . sp-down-sexp)
      ;; '("k" . sp-up-sexp)
      '("o s" . sp-wrap-square)
      '("o r" . sp-wrap-round)
      '("o c" . sp-wrap-curly)
      '("o \"" . wrap-string)
      '("O" . sp-unwrap-sexp)
      '("z" . meow-pop-selection)
      '("u" . meow-undo)
      '("U" . undo-redo))

    (meow-normal-define-key
     '("P" . meow-paren-mode)))

    (meow-setup)
    ;; (when (featurep 'corfu)
    ;;   (add-hook 'meow-insert-exit-hook 'corfu-quit))
    (meow-global-mode 1))
#+end_src
    
* Tex
:PROPERTIES:
:header-args+: :tangle lib/rca-tex.el
:END:

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  (provide 'rca-tex)

  (defvar rc/latex-subdir-plural
    '("figure" "table" "image" "section")
    "List of latex filetypes which need a plural form")

  (defun rc/is-main-latex-file ()
    "Returns t if the current file is the main tex file, nil otherwise"
    (when (equal (file-name-base buffer-file-name) "main") t))

  (defun rc/latex-file-subdirectory (filetype)
    "Define the subdirectory in a latex project for the filetype submitted as
  input"
    (let* ((file-path-prefix
            (if (rc/is-main-latex-file) "./" "../"))
           (file-type-subdir
            (if (member filetype rc/latex-subdir-plural)
                (concat filetype "s/")
              (concat filetype "/")))
           (file-type-subdir-with-prefix
            (concat file-path-prefix file-type-subdir))
           (file-path
            (read-file-name "File: " file-type-subdir-with-prefix "" t))
           (file-relative-path
            (replace-regexp-in-string
             (concat ".*" file-type-subdir "\\(.*\\)")
             (concat file-type-subdir-with-prefix "\\1") file-path)))
      (format "%s" file-relative-path)))

  (defun rc/latex-insert-file (&optional filetype)
    "Insert the relative path to a latex extra file in a subdirectory"
    (interactive "P")
    (if filetype
        (let ((filepath
               (rc/latex-file-subdirectory filetype)))
          (insert filepath))
      (let* ((filetype
              (completing-read "File type: "
                               '("image" "figure" "table" "code" "section") nil t))
             (filepath
              (rc/latex-file-subdirectory filetype)))
        (insert filepath))))

  (defun rc/cdlatex-pos-cursor-insert-file (&optional filetype)
    "Function to use in cdlatex command completion"
    (cdlatex-position-cursor)
    (if filetype
        (rc/latex-insert-file filetype)
      (let ((filetype (completing-read
                       "File type: " '("figure" "table" "section") nil t)))
        (rc/latex-insert-file filetype))))

  (defun rc/latex-array-separation ()
    (when (line-contains? "&")
      (progn
        (replace-regexp-in-line "&" " & ")
        (LaTeX-indent-line)
        (beginning-of-line-text)
        (left-char 1))))

  (advice-add 'LaTeX-insert-item :after #'rc/latex-array-separation)
#+end_src

** ~auctex~

#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :after pdf-tools
    :preface
    (defun rc/latex-init ()
      "Defines what modes are activated by default when entering AuCtex mode"
      (prettify-symbols-mode)
      (turn-on-cdlatex)
      (outline-minor-mode)  
      ;; (rc/auctex-macros)
      (TeX-source-correlate-mode t)
      (tex-fold-mode 1)
      (TeX-PDF-mode t)
      (reftex-mode t)
      (LaTeX-math-mode t))
    :init
    ;; Correct way to call hooks for auctex
    (add-hook 'LaTeX-mode-hook 'rc/latex-init)
    (setopt
     TeX-fold-macro-spec-list
     '(("{1}" ("emph")) ("{1}" ("textbf"))
       ("{1}" ("textit")) ("[1]:||►" ("item"))
       ("§ {1}" ("section" "section*"))
       ("[f]→‖{1}‖" ("footnote" "marginpar"))
       ("[c]→‖{1}‖" ("cite")) ("[l]→‖{1}‖" ("label"))
       ("[r]→‖{1}‖" ("ref" "pageref" "eqref" "footref"))
       ("[i]→‖{1}‖" ("index" "glossary"))
       ("§§ {1}" ("subsection" "subsection*"))
       ("§§§ {1}" ("subsubsection" "subsubsection*"))
       ("¶¶ {1}" ("subparagraph" "subparagraph*"))
       ("¶ {1}" ("paragraph" "paragraph*"))))
    :custom
    (TeX-parse-self t "Enable parse on load")
    (TeX-auto-save t "Enable parse on save")
    (TeX-arg-input-file-search 'nil "Find file manually")
    :config
    (setq-default preview-scale 1.4
                  prettify-symbols-unprettify-at-point 'right-edge
                  preview-scale-function (lambda () (* (/ 10.0 (preview-document-pt)) preview-scale))
                  TeX-source-correlate-method 'synctex
                  TeX-source-correlate-start-server t
                  TeX-master nil
                  TeX-view-program-selection '((output-pdf "PDF Tools")))

    ;; LaTeX math delimiters functions

    (defun +TeX--modify-math-delimiters (open-replacement close-replacement)
      (when (string-equal (match-string 0) "\\[")
        (replace-match open-replacement)
        (re-search-forward "\\\\\\]")
        (replace-match close-replacement))
      (when (string-equal (match-string 0) "\\(")
        (replace-match open-replacement)
        (re-search-forward "\\\\)")
        (replace-match close-replacement)))

    (defun +TeX-remove-math-delimiters ()
      "Removes math delimiters from the math block at point"
      (interactive)
      (unless (texmathp) (user-error "Not in math expression"))
      (save-mark-and-excursion
        (if (texmathp-match-environment nil)
            (progn
              (LaTeX-mark-environment)
              (re-search-forward "\\\\\\[\\|\\\\(" (region-end) t)
              (+TeX--modify-math-delimiters "" ""))
          (re-search-backward "\\\\\\[\\|\\\\(")
          (+TeX--modify-math-delimiters "" ""))))
    
    (defun +TeX-change-math-delimiter ()
      (interactive)
      (unless (texmathp) (user-error "Not in math expression"))
      (save-excursion
        (re-search-backward "\\\\\\[\\|\\\\(")
        (when (string-equal (match-string 0) "\\[")
          (+TeX--modify-math-delimiters "\\\\(" "\\\\)"))
        (when (string-equal (match-string 0) "\\(")
          (+TeX--modify-math-delimiters "\\\\[" "\\\\]"))))

    (defun +Tex-mark-math-block ()
      (interactive)
      (unless (texmathp) (user-error "Not in math expression"))
      (re-search-backward "\\\\\\[\\|\\\\(")
      (push-mark (point) t t)
      (when (string-equal (match-string 0) "\\[")
        (re-search-forward "\\\\\\]"))
      (when (string-equal (match-string 0) "\\(")
        (re-search-forward "\\\\)")))
    
    ;; Math block minor mode
    (defun +LaTeX-math-texmathp () t)
    (defun +LaTeX-math-texmathp-advice (fun)
      (if LaTeX-math-block-mode
          (+LaTeX-math-texmathp)
        (funcall fun)))
    
    (define-minor-mode LaTeX-math-block-mode
      "Mode for entering math blocks in external programs."
      :lighter " Math Block"
      :keymap `(
                (,(kbd "C-x C-s") . +save-n-kill-buffer-delete-frame)
                )
      (advice-add 'texmathp :around #'+LaTeX-math-texmathp-advice)))
#+end_src

** ~cdlatex~

#+begin_src emacs-lisp
  (use-package cdlatex
    :ensure t
    :defer t
    :init
    (defvar rc/cdlatex-env-list
      '(("axiom" "\\begin{axiom}\nLABEL\n?\n\\end{axiom}\n" nil)
        ("theorem" "\\begin{theorem}\nLABEL\n?\n\\end{theorem}\n" nil))
      "cdlatex enviroments")
    (defvar rc/cdlatex-command-list
      '(
        ;; ("ref"
        ;;  "Insert a new reference"
        ;;  "" consult-reftex-insert-reference nil t nil)
        ("gph"
         "Insert an image"
         "\\includegraphics[width=0.6\\linewidth]{?}"
         rc/cdlatex-pos-cursor-insert-file ("image") t nil)
        ("inp"
         "Input a file"
         "\\input{?}"
         rc/cdlatex-pos-cursor-insert-file nil t nil)
        ("inc"
         "Include a file"
         "\\include{?}"
         rc/cdlatex-pos-cursor-insert-file nil t nil)
        ("dm"
         "Insert a math display block"
         "\\[ ? \\]" cdlatex-position-cursor nil t nil)
        ("mm"
         "Insert an inline math block"
         "\\( ? \\)" cdlatex-position-cursor nil t nil)
        ("int"
         "Insert simple integral"
         "\\int_{?}" cdlatex-position-cursor nil nil t)
        ("oint"
         "Insert closed integral"
         "\\oint_{?}" cdlatex-position-cursor nil nil t)
        ("dv"
         "Insert a spaced differential variable"
         "\\, d?" cdlatex-position-cursor nil nil t)
        ("d."
         "Insert dots"
         "\\dots" cdlatex-position-cursor nil nil t)
        ("t."
         "Insert therefore symbol"
         "\\therefore" cdlatex-position-cursor nil nil t)
        ("intd"
         "Insert a definite integral limits"
         "\\biggr\\vert_{?}^{}" cdlatex-position-cursor nil nil t)
        ("int2"
         "Insert a definite integral limits"
         "\\iint" cdlatex-position-cursor nil nil t)
        ("int3"
         "Insert a definite integral limits"
         "\\iiint" cdlatex-position-cursor nil nil t)
        ("br"
         "Insert an escaped pair of braquets"
         "\\{ ? \\}" cdlatex-position-cursor nil nil t)
        ("sci"
         "Insert scientific notation"
         "\\times 10^{?}" cdlatex-position-cursor nil nil t))
      "cdlatex custom commands")
    (setq cdlatex-env-alist rc/cdlatex-env-list
          cdlatex-command-alist rc/cdlatex-command-list)
    :custom
    (cdlatex-paired-parens "$([{")
    (cdlatex-math-modify-alist '((111 "\\operatorname" nil t nil nil)
                                 (66 "\\mathbb" nil t nil nil)))
    (cdlatex-math-symbol-alist '((61 ("\\Leftrightarrow" "\\Longleftrightarrow" "\\coloneq"))))
    :bind ( :map cdlatex-mode-map
            ("C-<return>" . nil)
            ("´" . cdlatex-math-symbol)
            ("<tab>" . cdlatex-tab)))
#+end_src

** ~pdf-tools~

#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    ;; :defer t
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :hook ((pdf-view-mode . pdf-links-minor-mode)
           (pdf-view-mode . pdf-view-themed-minor-mode)
           (pdf-view-mode . pdf-sync-minor-mode))
    :init
    (pdf-tools-install)
    :custom
    (pdf-view-display-size 'fit-page "Fit to page by default")
    (pdf-annot-activate-created-annotations t "Activate annotations")
    :config
    (defvar mode-line-format--old nil
      "Variable to store last mode line format to restore it
      when deactivating presentation-mode")

    (add-to-list 'revert-without-query ".pdf")
    
    (define-minor-mode presentation-mode
      "Remove visual elements for presentation"
      :global nil
      (if presentation-mode
          (progn
            (setq mode-line-format--old mode-line-format)
            (setq mode-line-format nil)
            (tab-bar-mode -1))
        (setq mode-line-format mode-line-format--old)
        (tab-bar-mode)))
    (define-key pdf-view-mode-map (kbd "<f5>") 'presentation-mode)
    (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    (define-key pdf-view-mode-map (kbd "C-r") 'isearch-backward))

  (use-package org-pdftools
    :load-path "ext/org-pdftools.el"
    :hook (org-mode . org-pdftools-setup-link))
#+end_src

* Tools
:PROPERTIES:
:header-args+: :tangle lib/rca-tools.el
:END:

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  (provide 'rca-tools)
#+end_src

** ~ebuku~

#+begin_src emacs-lisp
  (use-package ebuku
    :ensure t
    :defer t
    :bind ("C-z b" . ebuku)
    :custom-face
    (ebuku-tags-face ((t (:inherit font-lock-keyword-face))))
    (ebuku-title-face ((t (:inherit font-lock-constant-face))))
    :custom
    (ebuku-results-limit 25))
#+end_src

** ~denote~

#+begin_src emacs-lisp
  (use-package denote
    :ensure t
    :custom
    (denote-known-keywords '("matematica" "informatica"))
    (denote-directory (concat sync-directory "archive/notes"))
    (denote-dired-directories (mapcar (lambda (dir) (concat sync-directory "archive/" dir )) '("notes" "journal" "posts")))
    :init
    (defvar-keymap denote-prefix-map
      :doc "Denote commands"
      "n" #'denote
      "o" #'denote-open-or-create
      "l" #'denote-link
      "L" #'denote-link-or-create
      "s" #'denote-grep)
    (defalias 'denote-prefix denote-prefix-map)
    :config
    (defun org-yank-image-denote-file-name-function ()
      (if (y-or-n-p "Rename file? ")
          (let ((title (denote-sluggify 'title (denote-title-prompt nil "File name: ")))
                (keywords (denote-keywords-combine (denote-sluggify-keywords (denote-keywords-prompt "Keywords: "))))
                (date (format-time-string "%Y%m%dT%H%M%S")))
            (concat date "--" title "__" keywords))
        (format-time-string "%Y%m%dT%H%M%S--clipboard")))

    (setq org-yank-image-file-name-function 'org-yank-image-denote-file-name-function)

    
    (defun my-remove-accents (text)
      (let ((slug-trim-chars '(;; Combining Diacritical Marks https://www.unicode.org/charts/PDF/U0300.pdf
                               768 ; U+0300 COMBINING GRAVE ACCENT
                               769 ; U+0301 COMBINING ACUTE ACCENT
                               770 ; U+0302 COMBINING CIRCUMFLEX ACCENT
                               771 ; U+0303 COMBINING TILDE
                               772 ; U+0304 COMBINING MACRON
                               774 ; U+0306 COMBINING BREVE
                               775 ; U+0307 COMBINING DOT ABOVE
                               776 ; U+0308 COMBINING DIAERESIS
                               777 ; U+0309 COMBINING HOOK ABOVE
                               778 ; U+030A COMBINING RING ABOVE
                               779 ; U+030B COMBINING DOUBLE ACUTE ACCENT
                               780 ; U+030C COMBINING CARON
                               795 ; U+031B COMBINING HORN
                               803 ; U+0323 COMBINING DOT BELOW
                               804 ; U+0324 COMBINING DIAERESIS BELOW
                               805 ; U+0325 COMBINING RING BELOW
                               807 ; U+0327 COMBINING CEDILLA
                               813 ; U+032D COMBINING CIRCUMFLEX ACCENT BELOW
                               814 ; U+032E COMBINING BREVE BELOW
                               816 ; U+0330 COMBINING TILDE BELOW
                               817 ; U+0331 COMBINING MACRON BELOW
                               )))
        (cl-flet* ((nonspacing-mark-p (char) (memq char slug-trim-chars)))
          (string-glyph-compose
           (apply #'string
                  (seq-remove #'nonspacing-mark-p
                              (string-glyph-decompose text)))))))

    (defun my/denote-sluggify-title (str)
      (downcase
       (denote-slug-hyphenate
        (my-remove-accents
         (replace-regexp-in-string "[][{}!@#$%^&*()+'\"?,.\|;:~`‘’“”/=]*" "" str)))))

    (setq denote-file-name-slug-functions
          '((title . my/denote-sluggify-title)
            (signature . denote-sluggify-signature)
            (keywords . denote-sluggify-keywords)))

    (setq denote-org-front-matter
          "#+title:      %s\n#+date:       %s\n#+filetags:   %s\n#+identifier: %s\n#+startup:    nofold\n#+startup:    hideblocks\n")
    (add-hook 'dired-mode-hook 'denote-dired-mode-in-directories)
    (global-set-key (kbd "C-z C-n") 'denote-prefix))

  (use-package denote-org
    :ensure t
    :defer t)

  (use-package denote-journal
    :ensure t
    :defer t
    :bind (:map denote-prefix-map ("j" . denote-journal-new-or-existing-entry))
    :custom
    (denote-journal-title-format 'day-date-month-year)
    (denote-journal-directory  (concat sync-directory "archive/journal")))
#+end_src

** ~embark~

#+begin_src emacs-lisp
  (use-package embark
    :ensure t
    :bind (("C-c o" . embark-act)
           :map embark-general-map
           ("G" . +embark-google-search)
           :map embark-url-map
           ("M" . +org-link-remote-open-in-mpv)
           :map embark-file-map
           ("M" . +org-link-open-in-mpv))
    :init
    (defun +embark-google-search (term)
      (interactive "sSearch Term: ")
      (browse-url (format "https://google.com/search?q=%s" term)))
    :config
    (add-to-list 'display-buffer-alist '("\\*Embark Actions\\*" (display-buffer-pop-up-window))))

  (use-package embark-consult
    :ensure t)
#+end_src

** ~citar~

#+begin_src emacs-lisp
  (use-package citar
    :ensure t
    :bind (("C-z c o" . citar-open)
           ("C-z c c" . citar-insert-citation)
           ("C-z c r" . citar-insert-reference)
           ("C-z c B" . citar-insert-bibtex)
           ("C-z c k" . citar-insert-keys))
    :custom
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    :config
    (let ((documents-path (xdg-user-dir "DOCUMENTS"))
          (archive-path (concat sync-directory "archive/bibliography/")))
      (setq org-cite-global-bibliography
            (mapcar (lambda (entry) (concat archive-path entry)) '("articles.bib" "books.bib")))
      (setq citar-library-paths
            (mapcar (lambda (entry) (concat documents-path entry)) '("/library/articles/" "/library/books/"))
            citar-notes-paths (list (concat archive-path "bibnotes/")))
      (setq citar-file-note-extensions '("org")
            citar-library-file-extensions '("pdf")
            citar-bibliography org-cite-global-bibliography))
    (defcustom +citar-remote-library-path nil "Remote path that contains the library"
      :type '(string))
    (defcustom +citar-library-server nil "Remote library ssh server"
      :type '(string))
    (defcustom +citar-library-port nil "Remote library ssh server port"
      :type '(string))
    (defcustom +citar-local-library-path nil "Local path that contains the library"
      :type '(string))
    (defun +citar-open-file-externally (citekey)
      "Opens associated file in the default system reader"
      (let ((file (car (car (hash-table-values (citar-get-files citekey))))))
        (if file (start-process "open pdf" nil "xdg-open" file)
          (message "No pdf file found with this citekey"))))
    (defun +citar-scholar-search (citekey)
      "Search the entry in google scholar"
      (browse-url (format "https://scholar.google.com/scholar?q=%s"
                          (citar-get-value "title" citekey))))
    (defun +citar-download-file (citekey)
      "Downloads file from the remote server and stores it in the library"
      (start-process "citar-download-file" nil "download-from-archive"
                     +citar-library-server +citar-library-port
                     +citar-remote-library-path citekey +citar-local-library-path)))

  (use-package citar-embark
    :ensure t
    :diminish
    :after (citar embark)
    :defer nil
    :bind (:map citar-embark-map
                ("g" . +citar-scholar-search)
                ("d" . +citar-download-file)
                ("F" . +citar-open-file-externally)
                :map citar-embark-citation-map
                ("g" . +citar-scholar-search)
                ("d" . +citar-download-file)
                ("F" . +citar-open-file-externally))
    :config
    (citar-embark-mode))
#+end_src

** ~ebib~

#+begin_src emacs-lisp
  (use-package ebib
    :ensure t
    :defer t
    :bind (("C-z c b" . ebib))
    :custom
    (ebib-preload-bib-files (mapcar (lambda (file) (concat sync-directory "archive/bibliography/" file)) '("articles.bib" "books.bib")))
    (ebib-file-search-dirs '("~/Files/Documents/library/articles" "~/Files/Documents/library/books"))
    (ebib-file-associations '(("ps" . "gv")))
    :config
    (define-key ebib-index-mode-map (kbd "O") '+ebib-open-file-externally)
    (define-key ebib-index-mode-map (kbd "L") '+ebib-scholar-search)
    (defun +ebib-open-file-externally () ; Maybe I can define args?
      (interactive)
      (let* ((file (ebib-get-field-value "file" (ebib--get-key-at-point) ebib--cur-db t 'unbraced))
             (filename (if file (ebib--expand-file-name file)
                         (ebib--expand-file-name (ebib--create-file-name-from-key (ebib--get-key-at-point) "pdf")))))
        (if filename
            (start-process "open pdf" nil "xdg-open" filename)
          (message "No PDF file found with this citekey"))))
    (defun +ebib-scholar-search ()
      (interactive)
      (browse-url (format "https://scholar.google.com/scholar?q=%s"
                          (ebib-get-field-value "title" (ebib--get-key-at-point) ebib--cur-db nil t)))))
#+end_src

** ~alert~

#+begin_src emacs-lisp
  (use-package alert
    :ensure t
    :config
    (defun rc/alert-notifications-notify (info)
      "Show the alert defined by INFO with `notifications-notify'."
      (let ((id (notifications-notify :title "Reminder"
                                      :body  (plist-get info :message)
                                      :app-icon (plist-get info :icon)
                                      :app-name "emacs"
                                      :timeout (if (plist-get info :persistent) 0 -1)
                                      :replaces-id (gethash (plist-get info :id) alert-notifications-ids)
                                      :urgency (cdr (assq (plist-get info :severity)
                                                          alert-notifications-priorities))
                                      :actions '("default" "Open corresponding buffer")
                                      :on-action (lambda (id action)
                                                   (when (string= action "default")
                                                     (switch-to-buffer (plist-get info :buffer)))))))
        (when (plist-get info :id)
          (puthash (plist-get info :id) id alert-notifications-ids)))
      (alert-message-notify info))
    (alert-define-style 'rc-style :title "My custom style" :notifier 'rc/alert-notifications-notify)
    (setq alert-default-style 'rc-style)

    ;; Short reminder commands
    (defun short-reminder (time message)
      (interactive "nMinutes: \nsMessage: ")
      (run-at-time (* (/ (float time) 2) 60) nil #'alert (concat message " (Timer at half)"))
      (run-at-time (* time 60) nil #'alert message)))

  (use-package org-wild-notifier
    :ensure t
    :requires alert
    :config
    (setq org-wild-notifier-alert-time '(4320 2880 1440 720 360 180 120 60 15 5 1))
    ;; (setq org-wild-notifier-keyword-whitelist nil)
    (org-wild-notifier-mode))
#+end_src

** ~dired~

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :hook (dired-mode . dired-hide-details-mode)
    :custom (dired-dwim-target t))

  (use-package dired-narrow
    :ensure t
    :bind (:map dired-mode-map ("\/" . dired-narrow)))
#+end_src

** 0x0

#+begin_src emacs-lisp
  (use-package 0x0
    :ensure t
    :config
    (defun +htmlize-buffer-with-theme (theme)
      (load-theme theme t)
      (write-file (buffer-name (htmlize-buffer (current-buffer) t)) nil)
      (when (car (cdr custom-enabled-themes))
        (load-theme (car (cdr custom-enabled-themes)) t)
        (disable-theme theme))
      (kill-buffer))

    (defun +htmlize-buffer-dark-theme ()
      (interactive)
      (+htmlize-buffer-with-theme (car (cdr (cdr (assoc theme-character themes))))))

    (defun +htmlize-buffer-light-theme ()
      (interactive)
      (+htmlize-buffer-with-theme (car (cdr (assoc theme-character themes)))))

    (defun +0x0-htmlize-and-send ()
      (interactive)
      (+htmlize-buffer-dark-theme)
      (let* ((server (0x0--choose-server))
             (file-name (expand-file-name (concat (buffer-name) ".html")))
             (size (file-attribute-size (file-attributes file-name)))
             (resp (0x0--send server file-name)))
        (0x0--handle-resp server size resp))))
#+end_src

** ~erc~

#+begin_src emacs-lisp
  (use-package erc
    :ensure nil
    :defer t
    ;; :hook (erc-join . erc-give-me-more-irc-history)
    :custom
    (erc-hide-list '("JOIN" "PART" "QUIT"))
    (erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
    (erc-track-exclude-types '("JOIN" "MODE" "NICK" "PART" "QUIT"
                               "324" "329" "332" "333" "353" "477"))
    (erc-fill-column 120)
    (erc-fill-function 'erc-fill-static)
    (erc-fill-static-center 20)
    (erc-track-shorten-start 5)
    (erc-keywords
      '(("'\\([^\n]+\\)' \\[\\([0-9:]+\\)\\]" . erc-keyword-face)))
    :config
    (defun erc-give-me-more-irc-history ()
      "Get more history for current IRC buffer (IRCv3 only).

  Defaults to 100 lines of history; when C-u prefixed, asks user for
  number of lines to fetch.

  If using an IRCv3 capable server/bouncer (like chat.sr.ht), fetch the
  chat history via the IRCv3 chathistory extension. (Currently, only
  soju-based servers implement this feature; see:
  https://ircv3.net/software/clients)

  For more on chathistory, see:
   - https://man.sr.ht/chat.sr.ht/bouncer-usage.md#chat-history-logs
   - https://ircv3.net/specs/extensions/chathistory
   - https://soju.im/doc/soju.1.html"
      (interactive)
      (if (not (member
                (with-current-buffer (current-buffer)
                  major-mode)
                '(erc-mode
                  circe-channel-mode
                  rcirc-mode)))
          (message "not an IRC buffer; ignoring")
        (let ((lines 200)
              (channel (buffer-name)))
          (when current-prefix-arg
            (progn
              (setq lines
                    (read-number (format "How many lines to fetch: ") lines))))
          (erc-send-input
           (concat "/quote CHATHISTORY LATEST " channel " * " (number-to-string lines))
           t)))))

  (use-package erc-hl-nicks
    :ensure t
    :after erc
    :custom
    (erc-hl-nicks-minimum-contrast-ratio 4.5))

  (use-package consult-erc
    :ensure (:host codeberg :repo "mekeor/consult-erc")
    :bind (("M-s e" . consult-erc-dwim))
    :after erc)
#+end_src

** shell

#+begin_src emacs-lisp :tangle no
  (use-package shell
    :ensure nil
    :bind (("C-x t SPC" . shell-other-tab))
    :config
    (defun shell-other-tab ()
      (interactive)
      (let* ((dir (file-name-nondirectory (directory-file-name default-directory)))
             (buffer (concat "*" dir "*")))
            (tab-switch buffer)
          (tab-new)
        (if (tab-bar-get-buffer-tab buffer)
          (shell buffer)))))
#+end_src

** ~gpt.el~

#+begin_src emacs-lisp
  (use-package gptel
    :ensure t
    :commands (gptel gptel-send)
    :custom
    (gptel-default-mode 'org-mode)
    (gptel-model 'deepseek-chat)
    :bind (("M-s g" . rc/find-gptel-file))
    :config
    (defun rc/find-gptel-file ()
      "Find config file interactively"
      (interactive)
      (find-file (locate-user-emacs-file
                  (completing-read "Select config file: "
                                   (directory-files-recursively (concat sync-directory "archive/llm/") ".*" nil)))))
    (dolist (directive
             '((Asistente . "Eres un modelo de lenguaje asistente especializado en programación el cual esta contenido en el editor de texto Emacs. Debes explicar tu respuesta de manera concisa.")
               (Generador . "Eres un modelo de lenguaje y un programador eficiente. Solo genera código y solo código como única salida sin ningún tipo de texto adicional.")
               (Matematico . "Eres un modelo de lenguaje y un instructor de matemática. Define de manera concisa los pasos usados en la resolución de problemas. Usa notación Latex con los símbolos \( y \) cuando sea necesario.")))
      (add-to-list 'gptel-directives directive))
    (setq gptel-backend (gptel-make-deepseek "Deepseek"
                          :stream t
                          :key #'gptel-api-key-from-auth-source)))
#+end_src

** ~elfeed~

#+begin_src emacs-lisp
  (use-package elfeed
    :ensure t
    :defer t
    :custom
    (elfeed-db-directory "~/.elfeed/")
    (elfeed-feeds '(("https://planet.emacslife.com/atom.xml" emacs)
                    ("https://emacsredux.com/atom.xml" emacs)
                    ("https://linmob.net/feed.xml" linux)
                    "https://blog.lx.oliva.nom.br/index.en.atom"
                    ("https://xkcd.com/rss.xml" comic)
                    ("https://samwho.dev/rss.xml" programming)
                    ("https://www.localfirstnews.com/rss/" programming)
                    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCiiTssXxklIDeDBWq0tPHUA" youtube music)
                    )))
#+end_src

* Local variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:

