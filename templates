fundamental-mode
(yo (insert (plist-get (car (auth-source-search :host "info")) :realname)))
(mail (insert (plist-get (car (auth-source-search :host "info")) :email)))
(hoy (format-time-string "%d-%m-%Y"))
(hoyf (rc/format-time-string-es "%d de %B del %Y"))
(box (make-string 2  (string-to-char comment-start)) " ┌─" (make-string (length str) ?─) "─┐" n
     (make-string 2  (string-to-char comment-start)) " │ " (s str)                       " │" n
     (make-string 2  (string-to-char comment-start)) " └─" (make-string (length str) ?─) "─┘" n)

org-mode

(ttl "#+title: " q)
(ath "#+author: " q)
(inc "#+include: " p p q)

org-mode :when (not (texmathp))

(mm "\\( " q " \\)")
(dm "\\[ " q " \\]")

lua-mode

(req "local " (s mod) " = require(\""(s mod) "\")" q)

c++-mode

(for "for(" p ") {" n> q n> "}" >)
(fun (p "int") " " (p "name") "() {" n> q n> "}" >)

(glbeg "glBegin("
(p (completing-read "GLEnum" '("GL_POINTS" "GL_LINES" "GL_LINE_STRIP" "GL_LINE_LOOP" "GL_TRIANGLES" "GL_TRIANGLE_STRIP" "GL_TRIANGLE_FAN" "GL_QUADS" "GL_QUAD_STRIP" "GL_POLYGON")) (tempel-next))
");" n> q n> "glEnd();")

typst-ts-mode :when (not (texmathp))

(mm "$" q "$")
(dm "$ " q " $")

LaTeX-mode
(frame "% ↓8<--------------- frame start -------------->8↓" n n r n n
       "% ↑8<--------------- frame end ---------------->8↑" n)
